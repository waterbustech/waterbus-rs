// Generated by diesel_ext

#![allow(clippy::all)]

use chrono::NaiveDateTime;
use diesel::prelude::*;
use serde::{Deserialize, Serialize};

use crate::core::database::schema::*;

#[repr(i32)]
#[derive(Debug)]
pub enum RoomType {
    Conferencing,
    LiveStreaming,
}

#[repr(i32)]
#[derive(Debug)]
pub enum RoomStatusEnum {
    Active,
    Inactive,
}

impl TryFrom<i32> for RoomStatusEnum {
    type Error = ();

    fn try_from(value: i32) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(RoomStatusEnum::Active),
            1 => Ok(RoomStatusEnum::Inactive),
            _ => Err(()),
        }
    }
}

#[repr(i32)]
#[derive(Debug)]
pub enum MembersRoleEnum {
    Host,
    Attendee,
}

#[repr(i32)]
#[derive(Debug)]
pub enum MessagesTypeEnum {
    Default,
    System,
}

#[repr(i32)]
#[derive(Debug)]
pub enum MessagesStatusEnum {
    Active,
    Inactive,
}

#[repr(i32)]
#[derive(Debug)]
pub enum RecordsStatusEnum {
    Recording,
    Processing,
    Finish,
}

#[repr(i32)]
#[derive(Debug)]
pub enum ParticipantsStatusEnum {
    Active,
    Inactive,
}

#[derive(
    Queryable, Selectable, Debug, Clone, Serialize, Deserialize, QueryableByName, Identifiable,
)]
#[diesel(table_name = rooms)]
#[serde(rename_all = "camelCase")]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Room {
    pub id: i32,
    pub title: String,
    #[serde(skip_serializing)]
    pub password: Option<String>,
    pub avatar: Option<String>,
    pub status: i32,
    pub latest_message_created_at: Option<NaiveDateTime>,
    pub code: String,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub deleted_at: Option<NaiveDateTime>,
    pub latest_message_id: Option<i32>,
    pub type_: i32,
}

#[derive(
    Queryable,
    Selectable,
    Debug,
    Clone,
    Serialize,
    Deserialize,
    QueryableByName,
    Associations,
    Identifiable,
)]
#[diesel(table_name = members)]
#[diesel(belongs_to(Room))]
#[diesel(belongs_to(User))]
#[serde(rename_all = "camelCase")]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Member {
    pub id: i32,
    pub role: i32,
    pub created_at: NaiveDateTime,
    pub deleted_at: Option<NaiveDateTime>,
    pub soft_deleted_at: Option<NaiveDateTime>,
    pub user_id: Option<i32>,
    pub room_id: Option<i32>,
}

#[derive(
    Queryable,
    Selectable,
    Debug,
    Clone,
    Serialize,
    Deserialize,
    QueryableByName,
    Associations,
    Identifiable,
)]
#[diesel(table_name = messages)]
#[diesel(belongs_to(Room, foreign_key = room_id))]
#[diesel(belongs_to(User, foreign_key = created_by_id))]
#[serde(rename_all = "camelCase")]
#[diesel(primary_key(id))]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Message {
    pub id: i32,
    pub data: String,
    pub type_: i32,
    pub status: i32,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub deleted_at: Option<NaiveDateTime>,
    pub created_by_id: Option<i32>,
    pub room_id: Option<i32>,
}

#[derive(
    Queryable,
    Selectable,
    Debug,
    Clone,
    Serialize,
    Deserialize,
    QueryableByName,
    Associations,
    Identifiable,
)]
#[diesel(table_name = participants)]
#[serde(rename_all = "camelCase")]
#[diesel(belongs_to(Room))]
#[diesel(belongs_to(User))]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Participant {
    pub id: i32,
    pub status: i32,
    pub created_at: NaiveDateTime,
    pub deleted_at: Option<NaiveDateTime>,
    pub user_id: Option<i32>,
    pub room_id: Option<i32>,
    pub node_id: Option<String>,
}

#[derive(
    Queryable, Selectable, Debug, Clone, Serialize, Deserialize, QueryableByName, Identifiable,
)]
#[diesel(table_name = users)]
#[serde(rename_all = "camelCase")]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct User {
    pub id: i32,
    pub full_name: Option<String>,
    pub user_name: String,
    pub bio: Option<String>,
    pub external_id: String,
    pub avatar: Option<String>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub deleted_at: Option<NaiveDateTime>,
    pub last_seen_at: Option<NaiveDateTime>,
}

#[derive(Insertable)]
#[diesel(table_name = users)]
pub struct NewUser<'a> {
    pub full_name: Option<&'a str>,
    pub user_name: &'a str,
    pub bio: Option<&'a str>,
    pub external_id: &'a str,
    pub avatar: Option<&'a str>,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Insertable)]
#[diesel(table_name = messages)]
pub struct NewMessage<'a> {
    pub data: &'a str,
    pub created_by_id: Option<&'a i32>,
    pub room_id: Option<&'a i32>,
    pub status: &'a i32,
    pub type_: &'a i32,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Insertable)]
#[diesel(table_name = rooms)]
pub struct NewRoom<'a> {
    pub title: &'a str,
    pub password: &'a str,
    pub code: &'a str,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
    pub latest_message_created_at: NaiveDateTime,
    pub status: i32,
    pub type_: i32,
}

#[derive(Insertable)]
#[diesel(table_name = members)]
pub struct NewMember<'a> {
    pub room_id: &'a i32,
    pub created_at: NaiveDateTime,
    pub user_id: Option<i32>,
    pub role: i32,
}

#[derive(Insertable)]
#[diesel(table_name = participants)]
pub struct NewParticipant<'a> {
    pub room_id: &'a i32,
    pub user_id: Option<i32>,
    pub created_at: NaiveDateTime,
    pub status: i32,
}
